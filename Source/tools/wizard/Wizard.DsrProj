# This project will use both sound and graphics, so we default initialize them to 1 before evaluating the library's header.
# The caller should provide the operating system's name (Windows, Linux)
Message "Starting Wizard.DsrProj\n"

# Give the Skip flag when compiling to only compile the wizard program itself.
if !(Skip)
	# The wizard application is used to launch applications, so make sure that they are built before launching the selection menu.
	Build "../../SDK" SkipIfBinaryExists Supressed
	Build "../../templates" SkipIfBinaryExists Supressed
end if

Message "Done with building the examples and continuing with building Wizard.DsrProj\n"

Graphics
Sound
Import "../../DFPSR/DFPSR.DsrHead"

# The DFPSR library uses C++14 as a minimum requirement, but you can use newer versions as well.
CompilerFlag "-std=c++14"

# Linking statically to standard C/C++ libraries allow running the program without installing them.
#   Recommended for making an installer for another application or programs that should not need an installer.
# If you don't want static linking of standard C/C++ libraries, you have to comment out StaticRuntime
#   and bundle the C/C++ runtime of the compiler with your program's installer.
StaticRuntime

# Find source code included by main recursively across header and implementation files with the same names.
Crawl "main.cpp"

# Enable if you want to see which includes and connected names are used to find source code.
#ListDependencies

# Enable to compile a debug version
# Debug

Message "Ending Wizard.DsrProj\n"
